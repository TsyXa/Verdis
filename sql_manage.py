import sqlite3 as sql

#Connect to a server's database
def setup(ctx, table) -> sql:
    if table == "logs":
        logs = sql.connect(f"{ctx.guild.id}.db")
        cursor = logs.cursor()

        try:
            cursor.execute("""CREATE TABLE logs (
                            log_id text,
                            user_id integer,
                            mod_id integer,
                            reason text,
                            date integer,
                            expires integer
                            )""")
            
        except sql.OperationalError: #If db already exists
            pass

        return logs, cursor
    
#Sanitise Case ID inputs
def caseID(cursor, case, cmd = None) -> bool:
    if case[:3] not in ["WRN", "TMO", "KCK", "BAN"] or len(case) != 10: #Format + length check
        return False
    
    #Look up table checks
    if cmd != None: 
        if case[:3] != cmd:
            return False
        
    cursor.execute("SELECT 'log_id' FROM logs")
    loglist = cursor.fetchall()

    if case not in loglist:
        return False
    
    return True

KEYWORDS = ["SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "DROP", "ALTER", "TABLE", "FROM", "WHERE", "INTO", "VALUES", "SET", "AND", "OR", "NOT", "NULL", "IS", "LIKE", "IN", "BETWEEN", "JOIN", "ON", "GROUP", "BY", "HAVING", "ORDER", "ASC", "DESC", "LIMIT", "OFFSET", "UNION", "ALL", "ANY", "AS", "CASE", "WHEN", "THEN", "ELSE", "END", "EXISTS", "INTERSECT", "MINUS", "NATURAL", "OUTER", "INNER", "LEFT", "RIGHT", "FULL", "CROSS", "USING", "DISTINCT", "EXCEPT", "FETCH", "FIRST", "NEXT", "LAST", "ROWNUM", "ROW_NUMBER", "OVER", "PARTITION", "LATERAL", "WINDOW", "LEAD", "LAG", "IGNORE", "NULLS", "FIRST_VALUE", "LAST_VALUE", "NTH_VALUE", "PERCENT_RANK", "CUME_DIST", "NTILE", "RANK", "DENSE_RANK", "COUNT", "SUM", "AVG", "MIN", "MAX", "STDDEV", "VARIANCE", "COVAR_POP", "COVAR_SAMP", "CORR", "REGR_SLOPE", "REGR_INTERCEPT", "REGR_COUNT", "REGR_R2", "REGR_AVGX", "REGR_AVGY", "REGR_SXX", "REGR_SYY", "REGR_SXY", "BIT_AND", "BIT_OR", "BIT_XOR", "JSON_ARRAYAGG", "JSON_OBJECTAGG", "STRING_AGG", "ARRAY_AGG", "XMLAGG", "JSON_AGG", "JSON_GROUP_ARRAY", "JSON_GROUP_OBJECT", "JSON_OBJECT", "JSON_BUILD_ARRAY", "JSON_BUILD_OBJECT", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_PRETTY", "JSON_QUOTE", "JSON_SET", "JSON_INSERT", "JSON_REMOVE", "JSON_REPLACE", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH",
            "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", 
            "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", 
            "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_EXTRACT_PATH", "JSON_SEARCH", "JSON_STORAGE_SIZE", "JSON_STORAGE_FREE", "JSON_STORAGE_USED", "JSON_OBJECT_KEYS", "JSON_TABLE", "JSON_TABLE_PRIMITIVE", "JSON_TABLE_ORDINALITY", "JSON_EXISTS", "JSON_TEXTCONTAINS", "JSON_TEXTCONTAINS_PATH", "JSON_TEXTMATCH", "JSON_TEXTMATCH_PATH", "JSON_VALUE", "JSON_QUERY", "JSON_SERIALIZE", "JSON_SERIALIZE_PRETTY", "JSON_TRANSCODE", "JSON_TRANSCODE_TEXT"]
    
def sanitise(statement: str) -> str:
    #Remove "", '' and ;
    statement = statement.replace("'", "").replace('"', '').replace(";", "")
    
    #Check statement against sql keywords list
    temp = ""
    for i in statement.split(" "):
        if i.upper() not in KEYWORDS:
            temp += i + " "
    statement = temp[:-1]

    #Remove spaces, = and --
    statement = statement.replace("  ", " ").replace("=", "").replace("--", "")
    return statement
